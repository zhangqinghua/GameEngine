#version 400 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

out vec4 color;

uniform vec3 lightColour;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform sampler2D textureSampler;
void main() {
	/*环境光*/
    vec3 ambient = 0.1f * lightColour;
    
	/*漫反射光*/
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0f);
    vec3 diffuse = diff * lightColour;
	
	/*镜面反射光*/
	float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColour; 
	
	color = vec4(ambient + diffuse + specular, 1.0f) * texture(textureSampler, TexCoords);
}
